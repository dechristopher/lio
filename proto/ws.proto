syntax = "proto3";

package ws.v1;

enum PlayerColor {
	PLAYER_COLOR_UNSPECIFIED = 0;
	PLAYER_COLOR_WHITE = 1;
	PLAYER_COLOR_BLACK = 2;
}

enum RoomState {
	ROOM_STATE_UNSPECIFIED = 0;
	ROOM_STATE_INIT = 1;
	ROOM_STATE_WAITING_FOR_PLAYERS = 2;
	ROOM_STATE_GAME_READY = 3;
	ROOM_STATE_GAME_ONGOING = 4;
	ROOM_STATE_GAME_OVER = 5;
	ROOM_STATE_ROOM_OVER = 6;
}

enum VariantGroup {
	VARIANT_GROUP_UNSPECIFIED = 0;
	VARIANT_GROUP_BLITZ = 1;
	VARIANT_GROUP_RAPID = 2;
	VARIANT_GROUP_HYPER = 3;
	VARIANT_GROUP_ULTI = 4;
	VARIANT_GROUP_BULLET = 5;
}

message TimeControl {
	int64 seconds = 1; // initial player time
	int64 increment_seconds = 2; // seconds gained after each move
	int64 delay_seconds = 3; // seconds before time starts to decrement
}

message Variant {
	string name = 1;
	string html_name = 2;
	VariantGroup group = 3;
	TimeControl control = 4;
}

message Variants {
	repeated Variant variants = 1; // array of variants
}

message VariantPools {
	// we can't use enums for keys within a map but using an int provides a workaround
	map<string, Variants> pools = 1;
}

message NewCustomRoomPayload {
	string variant_html_name = 1;
	PlayerColor player_color = 2;
}

message RoomPayload {
  string room_id = 1;
	RoomState room_state = 2;
	PlayerColor player_color = 3;
	bool is_creator = 4;
	Variant variant = 5;
}

// PingPayload is used to determine socket latency to server
message PingPayload {}

// PongPayload is the response to the Ping message
message PongPayload {}

message KeepAlivePayload {}

message OFENPayload {
  string ofen = 1;       // OFEN (position, toMove)
	string last_move = 2;   // last move played in UOI notation
	string black_clock = 3; // black clock in seconds
	string white_clock = 4; // white clock in seconds
	string game_id = 5; // game id for routing message to board
}

message Moves {
	repeated string moves = 1; // array of game moves
}

message MovePayload {
	ClockPayload clock = 1; // clock state
	string ofen = 2; // (position, toMove)
	string san = 3; 
	string uoi = 4; 
	int32 move_num = 5; // move count
	bool check = 6; // whether the player's king is in check
	Moves moves = 7; // moves that have been played
	map<string, Moves> valid_moves = 8; // moves the player can make
	int64 latency = 9; // player latency
	int32 ack = 10; // move ack from player
	string black = 11; // black player ID
	string white = 12; // white player ID
	ScorePayload score = 13; // score state
	bool game_start = 14; // whether the first move has been played
	RoomState room_state = 15; // room state
}

message CrowdPayload {
	bool black = 1;
	bool white = 2;
	int32 spectators = 3;
}

message ClockPayload {
	int64 control = 1; // time control total time
	int64 black = 2; // black clock in centi-seconds
	int64 white = 3; // white clock in centi-seconds
	int64 lag = 4; // internal server lag in milliseconds
	string variant_name = 5; // variant name
	string variant_group = 6; // variant group name
}

message ScorePayload {
	float black = 1; // black player score
	float white = 2; // white player score
}

message GameOverPayload {
	string winner = 1;
	int32 status_id = 2;
	string status = 3;
	ClockPayload clock = 4; // clock state
	ScorePayload score = 5; // score state
	bool room_over = 6; // whether the room has ended
}

message RedirectPayload {
	string location = 1;
}

message WebsocketMessage {
	oneof data {
		PingPayload ping_payload = 1;
		MovePayload move_payload = 2;
		GameOverPayload game_over_payload = 3;
		CrowdPayload crowd_payload = 4;
		OFENPayload ofen_payload = 5;
		RedirectPayload redirect_payload = 6;
		PongPayload pong_payload = 7;
		KeepAlivePayload keep_alive_payload = 8;
	}
}