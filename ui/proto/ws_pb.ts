// @generated by protoc-gen-es v0.3.0 with parameter "target=ts"
// @generated from file proto/ws.proto (package ws.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from enum ws.v1.PlayerColor
 */
export enum PlayerColor {
  /**
   * @generated from enum value: PLAYER_COLOR_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: PLAYER_COLOR_WHITE = 1;
   */
  WHITE = 1,

  /**
   * @generated from enum value: PLAYER_COLOR_BLACK = 2;
   */
  BLACK = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(PlayerColor)
proto3.util.setEnumType(PlayerColor, "ws.v1.PlayerColor", [
  { no: 0, name: "PLAYER_COLOR_UNSPECIFIED" },
  { no: 1, name: "PLAYER_COLOR_WHITE" },
  { no: 2, name: "PLAYER_COLOR_BLACK" },
]);

/**
 * @generated from enum ws.v1.RoomState
 */
export enum RoomState {
  /**
   * @generated from enum value: ROOM_STATE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ROOM_STATE_INIT = 1;
   */
  INIT = 1,

  /**
   * @generated from enum value: ROOM_STATE_WAITING_FOR_PLAYERS = 2;
   */
  WAITING_FOR_PLAYERS = 2,

  /**
   * @generated from enum value: ROOM_STATE_GAME_READY = 3;
   */
  GAME_READY = 3,

  /**
   * @generated from enum value: ROOM_STATE_GAME_ONGOING = 4;
   */
  GAME_ONGOING = 4,

  /**
   * @generated from enum value: ROOM_STATE_GAME_OVER = 5;
   */
  GAME_OVER = 5,

  /**
   * @generated from enum value: ROOM_STATE_ROOM_OVER = 6;
   */
  ROOM_OVER = 6,
}
// Retrieve enum metadata with: proto3.getEnumType(RoomState)
proto3.util.setEnumType(RoomState, "ws.v1.RoomState", [
  { no: 0, name: "ROOM_STATE_UNSPECIFIED" },
  { no: 1, name: "ROOM_STATE_INIT" },
  { no: 2, name: "ROOM_STATE_WAITING_FOR_PLAYERS" },
  { no: 3, name: "ROOM_STATE_GAME_READY" },
  { no: 4, name: "ROOM_STATE_GAME_ONGOING" },
  { no: 5, name: "ROOM_STATE_GAME_OVER" },
  { no: 6, name: "ROOM_STATE_ROOM_OVER" },
]);

/**
 * @generated from enum ws.v1.VariantGroup
 */
export enum VariantGroup {
  /**
   * @generated from enum value: VARIANT_GROUP_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: VARIANT_GROUP_BLITZ = 1;
   */
  BLITZ = 1,

  /**
   * @generated from enum value: VARIANT_GROUP_RAPID = 2;
   */
  RAPID = 2,

  /**
   * @generated from enum value: VARIANT_GROUP_HYPER = 3;
   */
  HYPER = 3,

  /**
   * @generated from enum value: VARIANT_GROUP_ULTI = 4;
   */
  ULTI = 4,

  /**
   * @generated from enum value: VARIANT_GROUP_BULLET = 5;
   */
  BULLET = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(VariantGroup)
proto3.util.setEnumType(VariantGroup, "ws.v1.VariantGroup", [
  { no: 0, name: "VARIANT_GROUP_UNSPECIFIED" },
  { no: 1, name: "VARIANT_GROUP_BLITZ" },
  { no: 2, name: "VARIANT_GROUP_RAPID" },
  { no: 3, name: "VARIANT_GROUP_HYPER" },
  { no: 4, name: "VARIANT_GROUP_ULTI" },
  { no: 5, name: "VARIANT_GROUP_BULLET" },
]);

/**
 * @generated from enum ws.v1.GameOutcome
 */
export enum GameOutcome {
  /**
   * @generated from enum value: GAME_OUTCOME_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: GAME_OUTCOME_DRAW = 1;
   */
  DRAW = 1,

  /**
   * @generated from enum value: GAME_OUTCOME_BLACK_WINS = 2;
   */
  BLACK_WINS = 2,

  /**
   * @generated from enum value: GAME_OUTCOME_WHITE_WINS = 3;
   */
  WHITE_WINS = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(GameOutcome)
proto3.util.setEnumType(GameOutcome, "ws.v1.GameOutcome", [
  { no: 0, name: "GAME_OUTCOME_UNSPECIFIED" },
  { no: 1, name: "GAME_OUTCOME_DRAW" },
  { no: 2, name: "GAME_OUTCOME_BLACK_WINS" },
  { no: 3, name: "GAME_OUTCOME_WHITE_WINS" },
]);

/**
 * @generated from message ws.v1.TimeControl
 */
export class TimeControl extends Message<TimeControl> {
  /**
   * initial player time
   *
   * @generated from field: int64 seconds = 1;
   */
  seconds = protoInt64.zero;

  /**
   * seconds gained after each move
   *
   * @generated from field: int64 increment_seconds = 2;
   */
  incrementSeconds = protoInt64.zero;

  /**
   * seconds before time starts to decrement
   *
   * @generated from field: int64 delay_seconds = 3;
   */
  delaySeconds = protoInt64.zero;

  constructor(data?: PartialMessage<TimeControl>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "ws.v1.TimeControl";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "seconds", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "increment_seconds", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "delay_seconds", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimeControl {
    return new TimeControl().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimeControl {
    return new TimeControl().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimeControl {
    return new TimeControl().fromJsonString(jsonString, options);
  }

  static equals(a: TimeControl | PlainMessage<TimeControl> | undefined, b: TimeControl | PlainMessage<TimeControl> | undefined): boolean {
    return proto3.util.equals(TimeControl, a, b);
  }
}

/**
 * @generated from message ws.v1.Variant
 */
export class Variant extends Message<Variant> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string html_name = 2;
   */
  htmlName = "";

  /**
   * @generated from field: ws.v1.VariantGroup group = 3;
   */
  group = VariantGroup.UNSPECIFIED;

  /**
   * @generated from field: ws.v1.TimeControl control = 4;
   */
  control?: TimeControl;

  constructor(data?: PartialMessage<Variant>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "ws.v1.Variant";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "html_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "group", kind: "enum", T: proto3.getEnumType(VariantGroup) },
    { no: 4, name: "control", kind: "message", T: TimeControl },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Variant {
    return new Variant().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Variant {
    return new Variant().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Variant {
    return new Variant().fromJsonString(jsonString, options);
  }

  static equals(a: Variant | PlainMessage<Variant> | undefined, b: Variant | PlainMessage<Variant> | undefined): boolean {
    return proto3.util.equals(Variant, a, b);
  }
}

/**
 * @generated from message ws.v1.Variants
 */
export class Variants extends Message<Variants> {
  /**
   * array of variants
   *
   * @generated from field: repeated ws.v1.Variant variants = 1;
   */
  variants: Variant[] = [];

  constructor(data?: PartialMessage<Variants>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "ws.v1.Variants";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "variants", kind: "message", T: Variant, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Variants {
    return new Variants().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Variants {
    return new Variants().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Variants {
    return new Variants().fromJsonString(jsonString, options);
  }

  static equals(a: Variants | PlainMessage<Variants> | undefined, b: Variants | PlainMessage<Variants> | undefined): boolean {
    return proto3.util.equals(Variants, a, b);
  }
}

/**
 * @generated from message ws.v1.VariantPools
 */
export class VariantPools extends Message<VariantPools> {
  /**
   * we can't use enums for keys within a map but using an int provides a workaround
   *
   * @generated from field: map<string, ws.v1.Variants> pools = 1;
   */
  pools: { [key: string]: Variants } = {};

  constructor(data?: PartialMessage<VariantPools>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "ws.v1.VariantPools";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pools", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Variants} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VariantPools {
    return new VariantPools().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VariantPools {
    return new VariantPools().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VariantPools {
    return new VariantPools().fromJsonString(jsonString, options);
  }

  static equals(a: VariantPools | PlainMessage<VariantPools> | undefined, b: VariantPools | PlainMessage<VariantPools> | undefined): boolean {
    return proto3.util.equals(VariantPools, a, b);
  }
}

/**
 * @generated from message ws.v1.NewCustomRoomPayload
 */
export class NewCustomRoomPayload extends Message<NewCustomRoomPayload> {
  /**
   * @generated from field: string variant_html_name = 1;
   */
  variantHtmlName = "";

  /**
   * @generated from field: ws.v1.PlayerColor player_color = 2;
   */
  playerColor = PlayerColor.UNSPECIFIED;

  constructor(data?: PartialMessage<NewCustomRoomPayload>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "ws.v1.NewCustomRoomPayload";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "variant_html_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "player_color", kind: "enum", T: proto3.getEnumType(PlayerColor) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NewCustomRoomPayload {
    return new NewCustomRoomPayload().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NewCustomRoomPayload {
    return new NewCustomRoomPayload().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NewCustomRoomPayload {
    return new NewCustomRoomPayload().fromJsonString(jsonString, options);
  }

  static equals(a: NewCustomRoomPayload | PlainMessage<NewCustomRoomPayload> | undefined, b: NewCustomRoomPayload | PlainMessage<NewCustomRoomPayload> | undefined): boolean {
    return proto3.util.equals(NewCustomRoomPayload, a, b);
  }
}

/**
 * @generated from message ws.v1.RoomPayload
 */
export class RoomPayload extends Message<RoomPayload> {
  /**
   * @generated from field: string room_id = 1;
   */
  roomId = "";

  /**
   * @generated from field: ws.v1.RoomState room_state = 2;
   */
  roomState = RoomState.UNSPECIFIED;

  /**
   * @generated from field: ws.v1.PlayerColor player_color = 3;
   */
  playerColor = PlayerColor.UNSPECIFIED;

  /**
   * @generated from field: bool is_creator = 4;
   */
  isCreator = false;

  /**
   * @generated from field: ws.v1.Variant variant = 5;
   */
  variant?: Variant;

  constructor(data?: PartialMessage<RoomPayload>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "ws.v1.RoomPayload";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "room_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "room_state", kind: "enum", T: proto3.getEnumType(RoomState) },
    { no: 3, name: "player_color", kind: "enum", T: proto3.getEnumType(PlayerColor) },
    { no: 4, name: "is_creator", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "variant", kind: "message", T: Variant },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RoomPayload {
    return new RoomPayload().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RoomPayload {
    return new RoomPayload().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RoomPayload {
    return new RoomPayload().fromJsonString(jsonString, options);
  }

  static equals(a: RoomPayload | PlainMessage<RoomPayload> | undefined, b: RoomPayload | PlainMessage<RoomPayload> | undefined): boolean {
    return proto3.util.equals(RoomPayload, a, b);
  }
}

/**
 * PingPayload is used to determine socket latency to server
 *
 * @generated from message ws.v1.PingPayload
 */
export class PingPayload extends Message<PingPayload> {
  constructor(data?: PartialMessage<PingPayload>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "ws.v1.PingPayload";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PingPayload {
    return new PingPayload().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PingPayload {
    return new PingPayload().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PingPayload {
    return new PingPayload().fromJsonString(jsonString, options);
  }

  static equals(a: PingPayload | PlainMessage<PingPayload> | undefined, b: PingPayload | PlainMessage<PingPayload> | undefined): boolean {
    return proto3.util.equals(PingPayload, a, b);
  }
}

/**
 * PongPayload is the response to the Ping message
 *
 * @generated from message ws.v1.PongPayload
 */
export class PongPayload extends Message<PongPayload> {
  constructor(data?: PartialMessage<PongPayload>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "ws.v1.PongPayload";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PongPayload {
    return new PongPayload().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PongPayload {
    return new PongPayload().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PongPayload {
    return new PongPayload().fromJsonString(jsonString, options);
  }

  static equals(a: PongPayload | PlainMessage<PongPayload> | undefined, b: PongPayload | PlainMessage<PongPayload> | undefined): boolean {
    return proto3.util.equals(PongPayload, a, b);
  }
}

/**
 * @generated from message ws.v1.KeepAlivePayload
 */
export class KeepAlivePayload extends Message<KeepAlivePayload> {
  constructor(data?: PartialMessage<KeepAlivePayload>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "ws.v1.KeepAlivePayload";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): KeepAlivePayload {
    return new KeepAlivePayload().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): KeepAlivePayload {
    return new KeepAlivePayload().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): KeepAlivePayload {
    return new KeepAlivePayload().fromJsonString(jsonString, options);
  }

  static equals(a: KeepAlivePayload | PlainMessage<KeepAlivePayload> | undefined, b: KeepAlivePayload | PlainMessage<KeepAlivePayload> | undefined): boolean {
    return proto3.util.equals(KeepAlivePayload, a, b);
  }
}

/**
 * @generated from message ws.v1.OFENPayload
 */
export class OFENPayload extends Message<OFENPayload> {
  /**
   * OFEN (position, toMove)
   *
   * @generated from field: string ofen = 1;
   */
  ofen = "";

  /**
   * last move played in UOI notation
   *
   * @generated from field: string last_move = 2;
   */
  lastMove = "";

  /**
   * black clock in seconds
   *
   * @generated from field: string black_clock = 3;
   */
  blackClock = "";

  /**
   * white clock in seconds
   *
   * @generated from field: string white_clock = 4;
   */
  whiteClock = "";

  /**
   * game id for routing message to board
   *
   * @generated from field: string game_id = 5;
   */
  gameId = "";

  constructor(data?: PartialMessage<OFENPayload>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "ws.v1.OFENPayload";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ofen", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "last_move", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "black_clock", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "white_clock", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "game_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OFENPayload {
    return new OFENPayload().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OFENPayload {
    return new OFENPayload().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OFENPayload {
    return new OFENPayload().fromJsonString(jsonString, options);
  }

  static equals(a: OFENPayload | PlainMessage<OFENPayload> | undefined, b: OFENPayload | PlainMessage<OFENPayload> | undefined): boolean {
    return proto3.util.equals(OFENPayload, a, b);
  }
}

/**
 * @generated from message ws.v1.Moves
 */
export class Moves extends Message<Moves> {
  /**
   * array of game moves
   *
   * @generated from field: repeated string moves = 1;
   */
  moves: string[] = [];

  constructor(data?: PartialMessage<Moves>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "ws.v1.Moves";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "moves", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Moves {
    return new Moves().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Moves {
    return new Moves().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Moves {
    return new Moves().fromJsonString(jsonString, options);
  }

  static equals(a: Moves | PlainMessage<Moves> | undefined, b: Moves | PlainMessage<Moves> | undefined): boolean {
    return proto3.util.equals(Moves, a, b);
  }
}

/**
 * @generated from message ws.v1.MovePayload
 */
export class MovePayload extends Message<MovePayload> {
  /**
   * clock state
   *
   * @generated from field: ws.v1.ClockPayload clock = 1;
   */
  clock?: ClockPayload;

  /**
   * (position, toMove)
   *
   * @generated from field: string ofen = 2;
   */
  ofen = "";

  /**
   * @generated from field: string san = 3;
   */
  san = "";

  /**
   * @generated from field: string uoi = 4;
   */
  uoi = "";

  /**
   * move count
   *
   * @generated from field: int32 move_num = 5;
   */
  moveNum = 0;

  /**
   * whether the player's king is in check
   *
   * @generated from field: bool check = 6;
   */
  check = false;

  /**
   * moves that have been played
   *
   * @generated from field: ws.v1.Moves moves = 7;
   */
  moves?: Moves;

  /**
   * moves the player can make
   *
   * @generated from field: map<string, ws.v1.Moves> valid_moves = 8;
   */
  validMoves: { [key: string]: Moves } = {};

  /**
   * player latency
   *
   * @generated from field: int64 latency = 9;
   */
  latency = protoInt64.zero;

  /**
   * move ack from player
   *
   * @generated from field: int32 ack = 10;
   */
  ack = 0;

  /**
   * black player ID
   *
   * @generated from field: string black = 11;
   */
  black = "";

  /**
   * white player ID
   *
   * @generated from field: string white = 12;
   */
  white = "";

  /**
   * score state
   *
   * @generated from field: ws.v1.ScorePayload score = 13;
   */
  score?: ScorePayload;

  /**
   * whether the first move has been played
   *
   * @generated from field: bool game_start = 14;
   */
  gameStart = false;

  /**
   * room state
   *
   * @generated from field: ws.v1.RoomState room_state = 15;
   */
  roomState = RoomState.UNSPECIFIED;

  constructor(data?: PartialMessage<MovePayload>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "ws.v1.MovePayload";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "clock", kind: "message", T: ClockPayload },
    { no: 2, name: "ofen", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "san", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "uoi", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "move_num", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "check", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "moves", kind: "message", T: Moves },
    { no: 8, name: "valid_moves", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Moves} },
    { no: 9, name: "latency", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "ack", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 11, name: "black", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "white", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "score", kind: "message", T: ScorePayload },
    { no: 14, name: "game_start", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 15, name: "room_state", kind: "enum", T: proto3.getEnumType(RoomState) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MovePayload {
    return new MovePayload().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MovePayload {
    return new MovePayload().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MovePayload {
    return new MovePayload().fromJsonString(jsonString, options);
  }

  static equals(a: MovePayload | PlainMessage<MovePayload> | undefined, b: MovePayload | PlainMessage<MovePayload> | undefined): boolean {
    return proto3.util.equals(MovePayload, a, b);
  }
}

/**
 * @generated from message ws.v1.CrowdPayload
 */
export class CrowdPayload extends Message<CrowdPayload> {
  /**
   * if the white and black players are in the room
   *
   * @generated from field: bool has_two_players = 1;
   */
  hasTwoPlayers = false;

  /**
   * @generated from field: int32 spectators = 2;
   */
  spectators = 0;

  constructor(data?: PartialMessage<CrowdPayload>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "ws.v1.CrowdPayload";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "has_two_players", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "spectators", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CrowdPayload {
    return new CrowdPayload().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CrowdPayload {
    return new CrowdPayload().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CrowdPayload {
    return new CrowdPayload().fromJsonString(jsonString, options);
  }

  static equals(a: CrowdPayload | PlainMessage<CrowdPayload> | undefined, b: CrowdPayload | PlainMessage<CrowdPayload> | undefined): boolean {
    return proto3.util.equals(CrowdPayload, a, b);
  }
}

/**
 * @generated from message ws.v1.ClockPayload
 */
export class ClockPayload extends Message<ClockPayload> {
  /**
   * time control total time
   *
   * @generated from field: int64 control = 1;
   */
  control = protoInt64.zero;

  /**
   * black clock in centi-seconds
   *
   * @generated from field: int64 black = 2;
   */
  black = protoInt64.zero;

  /**
   * white clock in centi-seconds
   *
   * @generated from field: int64 white = 3;
   */
  white = protoInt64.zero;

  /**
   * internal server lag in milliseconds
   *
   * @generated from field: int64 lag = 4;
   */
  lag = protoInt64.zero;

  /**
   * variant name
   *
   * @generated from field: string variant_name = 5;
   */
  variantName = "";

  /**
   * variant group name
   *
   * @generated from field: string variant_group = 6;
   */
  variantGroup = "";

  constructor(data?: PartialMessage<ClockPayload>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "ws.v1.ClockPayload";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "control", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "black", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "white", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "lag", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "variant_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "variant_group", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClockPayload {
    return new ClockPayload().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClockPayload {
    return new ClockPayload().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClockPayload {
    return new ClockPayload().fromJsonString(jsonString, options);
  }

  static equals(a: ClockPayload | PlainMessage<ClockPayload> | undefined, b: ClockPayload | PlainMessage<ClockPayload> | undefined): boolean {
    return proto3.util.equals(ClockPayload, a, b);
  }
}

/**
 * @generated from message ws.v1.ScorePayload
 */
export class ScorePayload extends Message<ScorePayload> {
  /**
   * black player score
   *
   * @generated from field: float black = 1;
   */
  black = 0;

  /**
   * white player score
   *
   * @generated from field: float white = 2;
   */
  white = 0;

  constructor(data?: PartialMessage<ScorePayload>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "ws.v1.ScorePayload";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "black", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 2, name: "white", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ScorePayload {
    return new ScorePayload().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ScorePayload {
    return new ScorePayload().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ScorePayload {
    return new ScorePayload().fromJsonString(jsonString, options);
  }

  static equals(a: ScorePayload | PlainMessage<ScorePayload> | undefined, b: ScorePayload | PlainMessage<ScorePayload> | undefined): boolean {
    return proto3.util.equals(ScorePayload, a, b);
  }
}

/**
 * @generated from message ws.v1.GameOverPayload
 */
export class GameOverPayload extends Message<GameOverPayload> {
  /**
   * @generated from field: ws.v1.PlayerColor winning_color = 1;
   */
  winningColor = PlayerColor.UNSPECIFIED;

  /**
   * @generated from field: ws.v1.GameOutcome game_outcome = 2;
   */
  gameOutcome = GameOutcome.UNSPECIFIED;

  /**
   * @generated from field: string outcome_details = 3;
   */
  outcomeDetails = "";

  /**
   * score state
   *
   * @generated from field: ws.v1.ScorePayload score = 4;
   */
  score?: ScorePayload;

  /**
   * whether the room has ended
   *
   * @generated from field: bool room_over = 5;
   */
  roomOver = false;

  constructor(data?: PartialMessage<GameOverPayload>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "ws.v1.GameOverPayload";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "winning_color", kind: "enum", T: proto3.getEnumType(PlayerColor) },
    { no: 2, name: "game_outcome", kind: "enum", T: proto3.getEnumType(GameOutcome) },
    { no: 3, name: "outcome_details", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "score", kind: "message", T: ScorePayload },
    { no: 5, name: "room_over", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GameOverPayload {
    return new GameOverPayload().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GameOverPayload {
    return new GameOverPayload().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GameOverPayload {
    return new GameOverPayload().fromJsonString(jsonString, options);
  }

  static equals(a: GameOverPayload | PlainMessage<GameOverPayload> | undefined, b: GameOverPayload | PlainMessage<GameOverPayload> | undefined): boolean {
    return proto3.util.equals(GameOverPayload, a, b);
  }
}

/**
 * @generated from message ws.v1.RedirectPayload
 */
export class RedirectPayload extends Message<RedirectPayload> {
  /**
   * @generated from field: string location = 1;
   */
  location = "";

  constructor(data?: PartialMessage<RedirectPayload>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "ws.v1.RedirectPayload";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "location", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RedirectPayload {
    return new RedirectPayload().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RedirectPayload {
    return new RedirectPayload().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RedirectPayload {
    return new RedirectPayload().fromJsonString(jsonString, options);
  }

  static equals(a: RedirectPayload | PlainMessage<RedirectPayload> | undefined, b: RedirectPayload | PlainMessage<RedirectPayload> | undefined): boolean {
    return proto3.util.equals(RedirectPayload, a, b);
  }
}

/**
 * @generated from message ws.v1.WebsocketMessage
 */
export class WebsocketMessage extends Message<WebsocketMessage> {
  /**
   * @generated from oneof ws.v1.WebsocketMessage.data
   */
  data: {
    /**
     * @generated from field: ws.v1.PingPayload ping_payload = 1;
     */
    value: PingPayload;
    case: "pingPayload";
  } | {
    /**
     * @generated from field: ws.v1.MovePayload move_payload = 2;
     */
    value: MovePayload;
    case: "movePayload";
  } | {
    /**
     * @generated from field: ws.v1.GameOverPayload game_over_payload = 3;
     */
    value: GameOverPayload;
    case: "gameOverPayload";
  } | {
    /**
     * @generated from field: ws.v1.CrowdPayload crowd_payload = 4;
     */
    value: CrowdPayload;
    case: "crowdPayload";
  } | {
    /**
     * @generated from field: ws.v1.OFENPayload ofen_payload = 5;
     */
    value: OFENPayload;
    case: "ofenPayload";
  } | {
    /**
     * @generated from field: ws.v1.RedirectPayload redirect_payload = 6;
     */
    value: RedirectPayload;
    case: "redirectPayload";
  } | {
    /**
     * @generated from field: ws.v1.PongPayload pong_payload = 7;
     */
    value: PongPayload;
    case: "pongPayload";
  } | {
    /**
     * @generated from field: ws.v1.KeepAlivePayload keep_alive_payload = 8;
     */
    value: KeepAlivePayload;
    case: "keepAlivePayload";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<WebsocketMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "ws.v1.WebsocketMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ping_payload", kind: "message", T: PingPayload, oneof: "data" },
    { no: 2, name: "move_payload", kind: "message", T: MovePayload, oneof: "data" },
    { no: 3, name: "game_over_payload", kind: "message", T: GameOverPayload, oneof: "data" },
    { no: 4, name: "crowd_payload", kind: "message", T: CrowdPayload, oneof: "data" },
    { no: 5, name: "ofen_payload", kind: "message", T: OFENPayload, oneof: "data" },
    { no: 6, name: "redirect_payload", kind: "message", T: RedirectPayload, oneof: "data" },
    { no: 7, name: "pong_payload", kind: "message", T: PongPayload, oneof: "data" },
    { no: 8, name: "keep_alive_payload", kind: "message", T: KeepAlivePayload, oneof: "data" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WebsocketMessage {
    return new WebsocketMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WebsocketMessage {
    return new WebsocketMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WebsocketMessage {
    return new WebsocketMessage().fromJsonString(jsonString, options);
  }

  static equals(a: WebsocketMessage | PlainMessage<WebsocketMessage> | undefined, b: WebsocketMessage | PlainMessage<WebsocketMessage> | undefined): boolean {
    return proto3.util.equals(WebsocketMessage, a, b);
  }
}

